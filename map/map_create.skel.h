/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED! */
#ifndef __MAP_CREATE_BPF_SKEL_H__
#define __MAP_CREATE_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct map_create_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *map3;
	} maps;
	struct {
		struct bpf_program *handle_tracepoint;
	} progs;
	struct {
		struct bpf_link *handle_tracepoint;
	} links;

#ifdef __cplusplus
	static inline struct map_create_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct map_create_bpf *open_and_load();
	static inline int load(struct map_create_bpf *skel);
	static inline int attach(struct map_create_bpf *skel);
	static inline void detach(struct map_create_bpf *skel);
	static inline void destroy(struct map_create_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
map_create_bpf__destroy(struct map_create_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
map_create_bpf__create_skeleton(struct map_create_bpf *obj);

static inline struct map_create_bpf *
map_create_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct map_create_bpf *obj;
	int err;

	obj = (struct map_create_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = map_create_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	map_create_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct map_create_bpf *
map_create_bpf__open(void)
{
	return map_create_bpf__open_opts(NULL);
}

static inline int
map_create_bpf__load(struct map_create_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct map_create_bpf *
map_create_bpf__open_and_load(void)
{
	struct map_create_bpf *obj;
	int err;

	obj = map_create_bpf__open();
	if (!obj)
		return NULL;
	err = map_create_bpf__load(obj);
	if (err) {
		map_create_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
map_create_bpf__attach(struct map_create_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
map_create_bpf__detach(struct map_create_bpf *obj)
{
	return bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *map_create_bpf__elf_bytes(size_t *sz);

static inline int
map_create_bpf__create_skeleton(struct map_create_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "map_create_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "map3";
	s->maps[0].map = &obj->maps.map3;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "handle_tracepoint";
	s->progs[0].prog = &obj->progs.handle_tracepoint;
	s->progs[0].link = &obj->links.handle_tracepoint;

	s->data = (void *)map_create_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *map_create_bpf__elf_bytes(size_t *sz)
{
	*sz = 4248;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x58\x0a\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x19\0\
\x01\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x44\x75\x61\x6c\x20\x42\x53\x44\x2f\
\x47\x50\x4c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x01\x11\x01\x25\x25\x13\x05\x03\x25\x72\x17\x10\x17\x1b\x25\x11\x1b\x12\
\x06\x73\x17\0\0\x02\x34\0\x03\x25\x49\x13\x3f\x19\x3a\x0b\x3b\x0b\x02\x18\0\0\
\x03\x01\x01\x49\x13\0\0\x04\x21\0\x49\x13\x37\x0b\0\0\x05\x24\0\x03\x25\x3e\
\x0b\x0b\x0b\0\0\x06\x24\0\x03\x25\x0b\x0b\x3e\x0b\0\0\x07\x13\x01\x0b\x0b\x3a\
\x0b\x3b\x0b\0\0\x08\x0d\0\x03\x25\x49\x13\x3a\x0b\x3b\x0b\x38\x0b\0\0\x09\x0f\
\0\x49\x13\0\0\x0a\x2e\x01\x11\x1b\x12\x06\x40\x18\x7a\x19\x03\x25\x3a\x0b\x3b\
\x0b\x27\x19\x49\x13\x3f\x19\0\0\x0b\x05\0\x03\x25\x3a\x0b\x3b\x0b\x49\x13\0\0\
\x0c\x0f\0\0\0\0\xa6\0\0\0\x05\0\x01\x08\0\0\0\0\x01\0\x0c\0\x01\x08\0\0\0\0\0\
\0\0\x02\x02\x10\0\0\0\x08\0\0\0\x02\x03\x2e\0\0\0\0\x04\x02\xa1\0\x03\x3a\0\0\
\0\x04\x3e\0\0\0\x0d\0\x05\x04\x06\x01\x06\x05\x08\x07\x02\x06\x4d\0\0\0\0\x0c\
\x02\xa1\x01\x07\x20\0\x07\x08\x07\x76\0\0\0\0\x08\0\x08\x09\x8b\0\0\0\0\x09\
\x08\x08\x0a\x8b\0\0\0\0\x0a\x10\x08\x0b\x76\0\0\0\0\x0b\x18\0\x09\x7b\0\0\0\
\x03\x87\0\0\0\x04\x3e\0\0\0\x01\0\x05\x08\x05\x04\x09\x87\0\0\0\x0a\x02\x10\0\
\0\0\x01\x5a\x0c\0\x0f\x87\0\0\0\x0b\x0d\0\x0f\xa8\0\0\0\0\x0c\0\x3c\0\0\0\x05\
\0\0\0\0\0\0\0\x25\0\0\0\x3a\0\0\0\x61\0\0\0\x69\0\0\0\x6e\0\0\0\x82\0\0\0\x87\
\0\0\0\x8c\0\0\0\x90\0\0\0\x94\0\0\0\x9a\0\0\0\xa6\0\0\0\xb8\0\0\0\x55\x62\x75\
\x6e\x74\x75\x20\x63\x6c\x61\x6e\x67\x20\x76\x65\x72\x73\x69\x6f\x6e\x20\x31\
\x34\x2e\x30\x2e\x30\x2d\x31\x75\x62\x75\x6e\x74\x75\x31\0\x6d\x61\x70\x2f\x6d\
\x61\x70\x5f\x63\x72\x65\x61\x74\x65\x2e\x62\x70\x66\x2e\x63\0\x2f\x68\x6f\x6d\
\x65\x2f\x6c\x65\x6f\x6e\x61\x72\x64\x6f\x2f\x53\x63\x72\x69\x76\x61\x6e\x69\
\x61\x2f\x70\x72\x6f\x76\x65\x2f\x66\x6f\x6e\x74\x61\x6e\x61\0\x4c\x49\x43\x45\
\x4e\x53\x45\0\x63\x68\x61\x72\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\
\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x6d\x61\x70\x33\0\x74\x79\x70\x65\0\x69\x6e\
\x74\0\x6b\x65\x79\0\x76\x61\x6c\x75\x65\0\x6d\x61\x78\x5f\x65\x6e\x74\x72\x69\
\x65\x73\0\x68\x61\x6e\x64\x6c\x65\x5f\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\
\0\x63\x74\x78\0\x1c\0\0\0\x05\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\x30\x01\0\0\x30\x01\0\0\xd9\0\0\
\0\0\0\0\0\0\0\0\x02\x03\0\0\0\x01\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\
\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x01\0\0\0\x05\0\0\0\0\0\0\x01\x04\0\0\
\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x02\0\0\0\0\0\0\0\x04\0\0\x04\x20\0\0\0\x19\0\0\
\0\x01\0\0\0\0\0\0\0\x1e\0\0\0\x05\0\0\0\x40\0\0\0\x22\0\0\0\x05\0\0\0\x80\0\0\
\0\x28\0\0\0\x01\0\0\0\xc0\0\0\0\x34\0\0\0\0\0\0\x0e\x06\0\0\0\x01\0\0\0\0\0\0\
\0\0\0\0\x02\0\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\x39\0\0\0\x08\0\0\0\x3d\0\0\
\0\x01\0\0\x0c\x09\0\0\0\xbe\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\
\0\x03\0\0\0\0\x0b\0\0\0\x04\0\0\0\x0d\0\0\0\xc3\0\0\0\0\0\0\x0e\x0c\0\0\0\x01\
\0\0\0\xcb\0\0\0\x01\0\0\x0f\0\0\0\0\x07\0\0\0\0\0\0\0\x20\0\0\0\xd1\0\0\0\x01\
\0\0\x0f\0\0\0\0\x0d\0\0\0\0\0\0\0\x0d\0\0\0\0\x69\x6e\x74\0\x5f\x5f\x41\x52\
\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x74\x79\x70\x65\
\0\x6b\x65\x79\0\x76\x61\x6c\x75\x65\0\x6d\x61\x78\x5f\x65\x6e\x74\x72\x69\x65\
\x73\0\x6d\x61\x70\x33\0\x63\x74\x78\0\x68\x61\x6e\x64\x6c\x65\x5f\x74\x72\x61\
\x63\x65\x70\x6f\x69\x6e\x74\0\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x2f\x73\
\x79\x73\x63\x61\x6c\x6c\x73\x2f\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\x5f\x65\
\x78\x65\x63\x76\x65\0\x2f\x68\x6f\x6d\x65\x2f\x6c\x65\x6f\x6e\x61\x72\x64\x6f\
\x2f\x53\x63\x72\x69\x76\x61\x6e\x69\x61\x2f\x70\x72\x6f\x76\x65\x2f\x66\x6f\
\x6e\x74\x61\x6e\x61\x2f\x6d\x61\x70\x2f\x6d\x61\x70\x5f\x63\x72\x65\x61\x74\
\x65\x2e\x62\x70\x66\x2e\x63\0\x20\x20\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x30\
\x3b\0\x63\x68\x61\x72\0\x4c\x49\x43\x45\x4e\x53\x45\0\x2e\x6d\x61\x70\x73\0\
\x6c\x69\x63\x65\x6e\x73\x65\0\0\0\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\
\x14\0\0\0\x1c\0\0\0\x30\0\0\0\0\0\0\0\x08\0\0\0\x4f\0\0\0\x01\0\0\0\0\0\0\0\
\x0a\0\0\0\x10\0\0\0\x4f\0\0\0\x01\0\0\0\0\0\0\0\x74\0\0\0\xb0\0\0\0\x05\x40\0\
\0\x0c\0\0\0\xff\xff\xff\xff\x04\0\x08\0\x08\x7c\x0b\0\x14\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x10\0\0\0\0\0\0\0\x58\0\0\0\x05\0\x08\0\x37\0\0\0\x08\x01\x01\xfb\
\x0e\x0d\0\x01\x01\x01\x01\0\0\0\x01\0\0\x01\x01\x01\x1f\x01\0\0\0\0\x03\x01\
\x1f\x02\x0f\x05\x1e\x01\x27\0\0\0\0\x5d\x06\x3e\xf6\x2c\xb1\x07\x48\x90\x9c\
\x34\xd9\x5e\x6b\x3d\xba\x04\0\0\x09\x02\0\0\0\0\0\0\0\0\x03\x0e\x01\x05\x05\
\x0a\x13\x02\x02\0\x01\x01\x2f\x68\x6f\x6d\x65\x2f\x6c\x65\x6f\x6e\x61\x72\x64\
\x6f\x2f\x53\x63\x72\x69\x76\x61\x6e\x69\x61\x2f\x70\x72\x6f\x76\x65\x2f\x66\
\x6f\x6e\x74\x61\x6e\x61\0\x6d\x61\x70\x2f\x6d\x61\x70\x5f\x63\x72\x65\x61\x74\
\x65\x2e\x62\x70\x66\x2e\x63\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\xe8\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x03\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x0b\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x0c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x03\0\x12\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x14\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x16\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x22\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x12\x01\0\0\x11\0\
\x04\0\0\0\0\0\0\0\0\0\x0d\0\0\0\0\0\0\0\x1a\x01\0\0\x11\0\x05\0\0\0\0\0\0\0\0\
\0\x20\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x03\0\0\0\x03\0\0\0\x11\0\0\0\0\0\0\0\
\x03\0\0\0\x04\0\0\0\x15\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x1f\0\0\0\0\0\0\0\
\x03\0\0\0\x06\0\0\0\x08\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x0c\0\0\0\0\0\0\0\
\x03\0\0\0\x05\0\0\0\x10\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x14\0\0\0\0\0\0\0\
\x03\0\0\0\x05\0\0\0\x18\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x1c\0\0\0\0\0\0\0\
\x03\0\0\0\x05\0\0\0\x20\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x24\0\0\0\0\0\0\0\
\x03\0\0\0\x05\0\0\0\x28\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x2c\0\0\0\0\0\0\0\
\x03\0\0\0\x05\0\0\0\x30\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x34\0\0\0\0\0\0\0\
\x03\0\0\0\x05\0\0\0\x38\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x3c\0\0\0\0\0\0\0\
\x03\0\0\0\x05\0\0\0\x08\0\0\0\0\0\0\0\x02\0\0\0\x0b\0\0\0\x10\0\0\0\0\0\0\0\
\x02\0\0\0\x0c\0\0\0\x18\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\x28\x01\0\0\0\0\0\0\
\x04\0\0\0\x0c\0\0\0\x40\x01\0\0\0\0\0\0\x04\0\0\0\x0b\0\0\0\x2c\0\0\0\0\0\0\0\
\x04\0\0\0\x02\0\0\0\x40\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x14\0\0\0\0\0\0\0\
\x03\0\0\0\x07\0\0\0\x18\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\x22\0\0\0\0\0\0\0\
\x03\0\0\0\x09\0\0\0\x2e\0\0\0\0\0\0\0\x03\0\0\0\x09\0\0\0\x48\0\0\0\0\0\0\0\
\x02\0\0\0\x02\0\0\0\x0a\x0b\x0c\0\x2e\x64\x65\x62\x75\x67\x5f\x61\x62\x62\x72\
\x65\x76\0\x2e\x74\x65\x78\x74\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\x2e\x65\x78\
\x74\0\x68\x61\x6e\x64\x6c\x65\x5f\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\0\
\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x73\x74\x72\x5f\x6f\x66\x66\x73\
\x65\x74\x73\0\x2e\x6d\x61\x70\x73\0\x2e\x64\x65\x62\x75\x67\x5f\x73\x74\x72\0\
\x2e\x64\x65\x62\x75\x67\x5f\x6c\x69\x6e\x65\x5f\x73\x74\x72\0\x2e\x72\x65\x6c\
\x2e\x64\x65\x62\x75\x67\x5f\x61\x64\x64\x72\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\
\x75\x67\x5f\x69\x6e\x66\x6f\0\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\x64\x72\x73\x69\
\x67\0\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x2f\x73\x79\x73\x63\x61\x6c\x6c\
\x73\x2f\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\x5f\x65\x78\x65\x63\x76\x65\0\x6c\
\x69\x63\x65\x6e\x73\x65\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x6c\x69\
\x6e\x65\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x66\x72\x61\x6d\x65\0\
\x6d\x61\x70\x5f\x63\x72\x65\x61\x74\x65\x2e\x62\x70\x66\x2e\x63\0\x2e\x73\x74\
\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x2e\x72\x65\x6c\x2e\x42\x54\
\x46\0\x4c\x49\x43\x45\x4e\x53\x45\0\x6d\x61\x70\x33\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf9\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x33\x09\0\0\0\0\0\0\x1f\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x9a\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\
\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xbf\0\0\0\
\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x50\0\0\0\0\0\0\0\x0d\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x4b\0\0\0\x01\0\0\0\x03\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x60\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x80\0\0\0\0\0\0\0\x9b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x80\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1b\x01\
\0\0\0\0\0\0\xaa\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x7c\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x50\x07\0\0\0\0\0\0\
\x40\0\0\0\0\0\0\0\x18\0\0\0\x07\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x38\
\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc5\x01\0\0\0\0\0\0\x40\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x34\0\0\0\x09\0\0\0\
\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x07\0\0\0\0\0\0\xe0\0\0\0\0\0\0\0\x18\0\
\0\0\x09\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x51\0\0\0\x01\0\0\0\x30\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\x02\0\0\0\0\0\0\xbc\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x70\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\xc1\x02\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x6c\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x70\x08\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\x18\0\0\0\x0c\0\0\0\x08\0\0\0\0\0\0\0\
\x10\0\0\0\0\0\0\0\x0d\x01\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe4\
\x02\0\0\0\0\0\0\x21\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x09\x01\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa0\x08\0\0\0\
\0\0\0\x20\0\0\0\0\0\0\0\x18\0\0\0\x0e\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\
\0\x19\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\x05\0\0\0\0\0\0\x50\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15\0\0\0\x09\
\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc0\x08\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\
\x18\0\0\0\x10\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xdb\0\0\0\x01\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x58\x05\0\0\0\0\0\0\x28\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd7\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\xe0\x08\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x18\0\0\0\x12\0\0\0\x08\
\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xcb\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x80\x05\0\0\0\0\0\0\x5c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\xc7\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x09\0\
\0\0\0\0\0\x30\0\0\0\0\0\0\0\x18\0\0\0\x14\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\
\0\0\0\x5c\0\0\0\x01\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xdc\x05\0\0\0\0\0\
\0\x3c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x8c\0\
\0\0\x03\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\x30\x09\0\0\0\0\0\0\x03\
\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x01\0\0\
\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\x06\0\0\0\0\0\0\x38\x01\0\0\0\0\
\0\0\x01\0\0\0\x0a\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0";
}

#ifdef __cplusplus
struct map_create_bpf *map_create_bpf::open(const struct bpf_object_open_opts *opts) { return map_create_bpf__open_opts(opts); }
struct map_create_bpf *map_create_bpf::open_and_load() { return map_create_bpf__open_and_load(); }
int map_create_bpf::load(struct map_create_bpf *skel) { return map_create_bpf__load(skel); }
int map_create_bpf::attach(struct map_create_bpf *skel) { return map_create_bpf__attach(skel); }
void map_create_bpf::detach(struct map_create_bpf *skel) { map_create_bpf__detach(skel); }
void map_create_bpf::destroy(struct map_create_bpf *skel) { map_create_bpf__destroy(skel); }
const void *map_create_bpf::elf_bytes(size_t *sz) { return map_create_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
map_create_bpf__assert(struct map_create_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __MAP_CREATE_BPF_SKEL_H__ */
